from telemetrix_aio import telemetrix_aio
import logging
import asyncio
from cbpi.api import *
import serial
import serial.tools.list_ports

logger = logging.getLogger(__name__)

# Define Arduino types
Uno = {
    "total_count": 20,
    "digital_pins": [i for i in range(28)],
    "pwm_count": 6,
    "pwm_pins": [3, 5, 6, 9, 10, 11],
    "analog_count": 6,
    "name": "Uno"
}

Nano = {
    "total_count": 20,
    "digital_pins": [i for i in range(28)],
    "pwm_count": 6,
    "pwm_pins": [3, 5, 6, 9, 10, 11],
    "analog_count": 6,
    "name": "Nano"
}

Mega = {
    "total_count": 70,
    "digital_pins": [i for i in range(54)],
    "pwm_count": 15,
    "pwm_pins": [2, 3, 5, 6, 9, 10, 11, 12, 13, 44, 45, 46],
    "analog_count": 16,
    "name": "Mega"
}

global board

async def TelemetrixInitialize():
    global board
    logger.info("***************** Start Telemetrix  ************************")
    try:
        loop1 = asyncio.get_event_loop()
        board = telemetrix_aio.TelemetrixAIO(autostart=False, loop=loop1)
        await board.start_aio()
        logger.info("Telemetrix initialized successfully")
    except Exception as e:
        logger.error(f"Error. Could not activate Telemetrix: {e}")
        board = None

class AtrduinoTelemetrix(CBPiExtension):
    def __init__(self, cbpi):
        self.cbpi = cbpi
        self._task = asyncio.create_task(self.init_actor())

    async def init_actor(self):
        await TelemetrixInitialize()

@parameters([Property.Select(label="GPIO", options=Mega['digital_pins']), Property.Select(label="Inverted", options=["Yes", "No"], description="No: Active on high; Yes: Active on low")])
class ArduinoGPIOActor(CBPiActor):
    def __init__(self, cbpi, id, props):
        super().__init__(cbpi, id, props)
        self.gpio = None
        self.inverted = None
        self.state = False

    async def on_start(self):
        global board
        self.gpio = int(self.props['GPIO'])
        self.inverted = self.props['Inverted'] == "Yes"
        await board.set_pin_mode_digital_output(self.gpio)
        await board.digital_write(self.gpio, 0)

    async def on(self, power=0):
        global board
        logger.info(f"ACTOR {self.id} ON - GPIO {self.gpio}")
        await board.digital_write(self.gpio, 1 if not self.inverted else 0)
        self.state = True

    async def off(self):
        global board
        logger.info(f"ACTOR {self.id} OFF - GPIO {self.gpio}")
        await board.digital_write(self.gpio, 0 if not self.inverted else 1)
        self.state = False

    def get_state(self):
        return self.state

    async def run(self):
        while self.running:
            await asyncio.sleep(1)

@parameters([Property.Select(label="GPIO", options=Mega['pwm_pins']), Property.Number("Frequency", configurable=True)])
class ArduinoGPIOPWMActor(CBPiActor):
    @action("Set Power", parameters=[Property.Number(label="Power", configurable=True, description="Power Setting [0-100]")])
    async def setpower(self, Power=100, **kwargs):
        self.power = min(max(int(Power), 0), 255)
        await self.set_power(self.power)

    async def on_start(self):
        global board
        self.gpio = int(self.props['GPIO'])
        self.frequency = int(self.props['Frequency'])
        await board.set_pin_mode_analog_output(self.gpio)
        await board.analog_write(self.gpio, 0)
        self.state = False
        self.power = None

    async def on(self, power=None):
        global board
        if power is not None:
            self.power = power
        else:
            self.power = 255
        logger.info(f"PWM ACTOR {self.id} ON - GPIO {self.gpio} - Frequency {self.frequency} - Power {self.power}")
        await board.analog_write(self.gpio, self.power)
        self.state = True
        await self.cbpi.actor.actor_update(self.id, self.power)

    async def off(self):
        global board
        logger.info(f"PWM ACTOR {self.id} OFF - GPIO {self.gpio}")
        await board.analog_write(self.gpio, 0)
        self.state = False

    async def set_power(self, power):
        global board
        if self.state:
            await board.analog_write(self.gpio, int(power))
        await self.cbpi.actor.actor_update(self.id, int(power))

    def get_state(self):
        return self.state

    async def run(self):
        while self.running:
            await asyncio.sleep(1)

def setup(cbpi):
    cbpi.plugin.register("ArduinoGPIOActor", ArduinoGPIOActor)
    cbpi.plugin.register("ArduinoGPIOPWMActor", ArduinoGPIOPWMActor)
    cbpi.plugin.register("AtrduinoTelemetrix", AtrduinoTelemetrix)
    pass
